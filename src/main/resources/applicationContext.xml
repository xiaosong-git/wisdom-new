<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/context  
               			http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/tx 
    					http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
						http://www.springframework.org/schema/aop
	       				http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	       				http://www.springframework.org/schema/mvc      
           				http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
           				http://code.alibabatech.com/schema/dubbo
           				http://code.alibabatech.com/schema/dubbo/dubbo.xsd"
    default-autowire="byName">
    
    <context:annotation-config />
    <!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
    <context:component-scan base-package="com.xdream">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- ＪＤＢＣ配置      begin -->
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean> -->
	<!-- ＪＤＢＣ配置     加密 -->
	<bean class="com.xdream.kernel.dao.jdbc.EncryptablePropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean>

	<!-- LOB大数据列支持 -->
	<!-- <bean id="lobHandler" lazy-init="true" class="org.springframework.jdbc.support.lob.DefaultLobHandler" /> -->
	
	<!-- druid -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${driverClassName}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!-- <property name="filters" value="${filters}" /> -->
  
        <property name="maxActive" value="${maxActive}" />
        <property name="initialSize" value="${initialSize}" />
        <property name="maxWait" value="${maxWait}" />
        <property name="minIdle" value="${minIdle}" />
  
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
  
        <!-- <property name="validationQuery" value="${validationQuery}" />
        <property name="testWhileIdle" value="${testWhileIdle}" />
        <property name="testOnBorrow" value="${testOnBorrow}" />
        <property name="testOnReturn" value="${testOnReturn}" /> -->
        <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
        <property name="removeAbandoned" value="${removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="${logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->
    </bean>
    <!-- database -->

   	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    	<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"/>
	</bean>


	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
	
		<tx:attributes>
            <!-- <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/> -->
            <tx:method name="tx*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="batch*" propagation="REQUIRED" rollback-for="Exception"/>
		    <!-- <tx:method name="seri*" propagation="REQUIRED" isolation="SERIALIZABLE" rollback-for="Exception" /> -->    
  </tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="coreTransactionPointcut"
			expression="execution(public * com.xdream.kernel.service.*.*(..))" /> <!--把事务控制在Service层 -->
		<aop:advisor pointcut-ref="coreTransactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>
	
	<aop:config>
		<aop:pointcut id="goldccmTransactionPointcut"
			expression="execution(public * com.xdream.wisdom.service.*.*(..))" /> <!--把事务控制在Service层 -->
		<aop:advisor pointcut-ref="goldccmTransactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>
<import resource="activemq.xml"/>
</beans>